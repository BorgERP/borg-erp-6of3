# -*- coding: utf-8 -*-
# -*- encoding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2009 Tiny SPRL (<http://tiny.be>). All Rights Reserved
#    $Id$
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

import time
import base64

from osv import fields, osv
from tools.translate import _

'''
"MN IZVADAK" na magnetnom nositelju obvezno sadrži slijedeće vrste slogova:
    - Tip sloga “0" koji sadrži SLOG PAKETA - "LABELU"
    -     Tip sloga “3" koji sadrži VODEĆI SLOG GRUPE PODATAKA
    -         Tip sloga “5" koji sadrži SLOG POJEDINAČNE TRANSAKCIJE
    -     Tip sloga “7" koji sadrži ZAKLJUČNI SLOG GRUPE PODATAKA
    - Tip sloga “9" koji sadrži ZAKLJUČNI SLOG PAKETA
'''    

def slog00():
    return{
        'Broj podruznice_FINA-e':      ['N',   1,   5,   5], 
        'Tip kodne stranice':          ['C',   6,   6,   1], 
        'Vrsta digitalnog potpisa':    ['C',   7,   7,   1],
        'Datum obrade (DDMMYY)':       ['N',   8,  13,   6],
        'Id broj primatelja izvatka':  ['N',  14,  20,   7], 
        'Vrsta izvatka = 250':         ['N',  21,  23,   3], 
        'Rezerva':                     ['C',  23, 191, 168], 
        'Prosireni datum':             ['N', 192, 199,   8], 
        'Rezerva':                     ['C', 200, 249,  50], 
        'Tip sloga':                   ['N', 250, 250,   1], 
       }

#VODEĆI SLOG GRUPE PODATAKA) - TIP SLOGA = 3
def slog03():
    return{ 
        'Racun korisnika izvatka':    ['C',   1,  18,  18],
        'Naziv korisnika izvatka':    ['C',  19,  53,  35],
        'Redni broj izvatka':         ['N',  54,  56,   3],
        'Datum izvatka':              ['N',  57,  62,   6],
        'Broj pretinca':              ['N',  63,  67,   5],
        'R.br. grupe mag. nositelju': ['N',  68,  71,   4],
        'Naziv FINA-e':               ['C',  72, 106,  35],
        'Broj dnevnog presjeka':      ['N', 107, 109,   3],
        'Tip kodne stranice':         ['C', 110, 110,   1],
        'Vrsta digitalnog potpisa':   ['C', 111, 111,   1],
        'Vrsta izvatka = 250':        ['N', 112, 114,   3],
        'Vodeći broj banke':          ['N', 115, 121,   7],
        'Oznaka konstrukcije racuna': ['C', 122, 122,   1],
        'IBAN – oznaka ziro racuna':  ['C', 123, 126,   4],
        'BIC- Id banke':              ['C', 127, 134,   8], 
        'Rezerva':                    ['C', 135, 191,  56], 
        'Prosireni datum':            ['N', 192, 199,   8],
        'Rezerva':                    ['C', 200, 249,  50],
        'Tip sloga':                  ['N', 250, 250,   1],
        }

def slog05():
    return{
        'Oznaka transakcije':           ['N',   1,   2,   2],
        'Racun vjer./duz.':             ['C',   3,  20,  18],
        'Naziv vjer./duz.':             ['C',  21,  55,  35],
        'Mjesto vjer./duz.':            ['C',  56,  65,  10],
        'Iznos':                        ['N',  66,  78,  13],
        'Poziv na broj zaduzenja':      ['C',  79, 102,  24],
        'Poziv na broj odobrenja':      ['C', 103, 126,  24],
        'Vezna oznaka':                 ['N', 127, 128,   2],
        'Opis svrhe doznake':           ['C', 129, 164,  36],
        'Oznaka konstrukcije racuna':   ['C', 165, 165,   1],
        'Broj za reklamaciju':          ['C', 166, 197,  32],
        'Vodeci broj banke vjer./duz.': ['N', 198, 204,   7],
        'Vrsta prihvata':               ['N', 205, 207,   3],
        'Izvor dokumenta':              ['N', 208, 210,   3],
        'Datum valute':                 ['N', 211, 218,   8],
        'Rezerva':                      ['N', 219, 249,  31],
        'Tip sloga':                    ['N', 250, 250,   1],
        } 

def slog07():
    return{
        'Racun korisnika izvatka':      ['C',   1,  18, 18],
        'Naziv korisnika izvatka':      ['C',  19,  53, 35],
        'Redni broj izvatka':           ['N',  54,  56,  3],
        'Datum izvatka':                ['N',  57,  62,  6],
        'Prethodni saldo':              ['N',  63,  77, 15],
        'Ukupni dnevni dug. promet':    ['N',  78,  92, 15],
        'Ukupni dnevni pot. promet':    ['N',  93, 107, 15],
        'Novi saldo':                   ['N', 108, 122, 15],
        'R.br. grupe mag.nositelju':    ['N', 123, 126,  4],
        'Broj stavaka u grupi':         ['N', 127, 132,  6],
        'Naziv FINA-e':                 ['C', 133, 167, 35],
        'Broj dnevnog presjeka':        ['N', 168, 170,  3],
        'Predznak pocetnog stanja':     ['C', 171, 171,  1],
        'Predznak novog stanja':        ['C', 172, 172,  1],
        'Razlika na dugovnoj stavci':   ['C', 173, 173,  1],
        'Razlika na potraznoj stavci':  ['C', 174, 174,  1],
        'Rezerva':                      ['C', 175, 191, 17],
        'Prosireni datum':              ['N', 192, 199,  8],
        'Vodeci broj banke':            ['N', 200, 206,  7],
        'Oznaka konstrukcije racuna':   ['C', 207, 207,  1],
        'Rezerva':                      ['C', 208, 249, 42],
        'Tip sloga':                    ['N', 250, 250,  1],
        }

def slog09():
    return{
        'Broj podruznice_FINA-e':       ['N',   1,   5,   5],
        'Rezerva':                      ['C',   6,   7,   2],
        'Datum obrade':                 ['N',   8,  13,   6],
        'Id. broj primatelja izvatka':  ['N',  14,  20,   7],
        'Ukupan broj grupa/paket':      ['N',  21,  25,   5],
        'Ukupan broj slog/paket':       ['N',  26,  31,   6],
        'Rezerva':                      ['C',  32, 191, 160],
        'Prosireni datum':              ['N', 192, 199,   8],
        'Rezerva':                      ['C', 200, 249,  50],
        'Tip sloga':                    ['N', 250, 250,   1],
        }
        

def str2date(date_str):
    return time.strftime("%y/%m/%d", time.strptime(date_str, "%d%m%y"))

def str2float(str):
    try:
        return float(str)
    except:
        return 0.0

def list2float(lst):
    try:
        return str2float((lambda s: s[:-3] + '.' + s[-3:])(lst))
    except:
        return 0.0

class account_mnizvod_import(osv.osv_memory):
    _name = 'account.mnizvod.import'
    _description = 'Uvoz datoteka izvoda - MN FINA'
    _columns = {
            'journal_id': fields.many2one('account.journal', 'Bank Journal', required=True),
            'def_payable': fields.many2one('account.account', 'Default Payable Account', domain=[('type', '=', 'payable')], required=True, help= 'Set here the payable account that will be used, by default, if the partner is not found'),
            'def_receivable': fields.many2one('account.account', 'Default Receivable Account', domain=[('type', '=', 'receivable')], required=True, help= 'Set here the receivable account that will be used, by default, if the partner is not found',),
            'awaiting_account': fields.many2one('account.account', 'Default Account for Unrecognized Movement', domain=[('type', '=', 'liquidity')], required=True, help= 'Set here the default account that will be used, if the partner is found but does not have the bank account, or if he is domiciled'),
            'coda': fields.binary('Coda File', required=True),
            'note':fields.text('Log'),
    }

    def mnizvod_parsing(self, cr, uid, ids, context=None):

        journal_obj=self.pool.get('account.journal')
        account_period_obj = self.pool.get('account.period')
        partner_bank_obj = self.pool.get('res.partner.bank')
        bank_statement_obj = self.pool.get('account.bank.statement')
        bank_statement_line_obj = self.pool.get('account.bank.statement.line')
        voucher_obj = self.pool.get('account.voucher')
        voucher_line_obj = self.pool.get('account.voucher.line')
        account_izvod_obj = self.pool.get('account.izvod')
        mod_obj = self.pool.get('ir.model.data')
        move_line_obj = self.pool.get('account.move.line')
        partner_obj = self.pool.get('res.partner')

        if context is None:
            context = {}

        data = self.read(cr, uid, ids)[0]

        codafile = data['coda']
        journal = journal_obj.browse(cr, uid, data['journal_id'], context=context)
        journal_code = journal.code

        #?period = account_period_obj.find(cr, uid, context=context)[0]
        def_pay_acc = data['def_payable']
        def_rec_acc = data['def_receivable']

        err_log = "Errors:\n------\n"
        nb_err=0
        std_log=''
        str_log1 = "Coda File is Imported:  "
        str_not=''
        str_not1=''

        bank_statements = []
        bank_statement = {}
        recordlist = base64.decodestring(codafile).split('\n')
        recordlist.pop()

        def parse_row(tip_sloga, slog):
            if tip_sloga == '0':
                def_sloga = slog00()
            elif tip_sloga == '3':    
                def_sloga = slog03()
            elif tip_sloga == '5':    
                def_sloga = slog05()
            elif tip_sloga == '7':    
                def_sloga = slog07()
            elif tip_sloga == '9':    
                def_sloga = slog09()
            res = {}.fromkeys(def_sloga,None)
            for key in def_sloga.keys():
                res[key] = slog[ def_sloga[key][1]-1 : def_sloga[key][2] ].decode('windows-1250') 

            return res       
                
        file_start = None
        file_end   = None
        izvodi =[]
        for line in recordlist:
            tip_sloga = line[250 -1]
            parsed_row = parse_row ( tip_sloga, line )
            if tip_sloga == '0':
                if file_start:
                    raise osv.except_osv(_('Višestruki početni slog'),_('Višestruki tip sloga "0" koji sadrži SLOG PAKETA - "LABELU" %s') % (parsed_row,))
                file_start = parsed_row.copy()
            elif tip_sloga == '9':
                if file_end:
                    raise osv.except_osv(_('Višestruki završni slog'),_('Višestruki tip sloga “9" koji sadrži ZAKLJUČNI SLOG PAKETA %s') % (parsed_row,))
                file_end = parsed_row.copy()

            elif tip_sloga == '3':
                izvodi.append(
                               {'izvod_start'  : parsed_row.copy(),
                                'stavke_izvoda': [],
                                'izvod_end'    : None,
                                }                          )
            elif tip_sloga == '7':
                izvodi[-1]['izvod_end'] = parsed_row.copy()

            elif tip_sloga == '5':
                izvodi[-1]['stavke_izvoda'].append(parsed_row.copy() )
                
            else:    
                raise osv.except_osv(_('Neispravan tip sloga'),_('Tip sloga u datoteci nije u prepoznat! %s') % (parsed_row,))
            
            #print parsed_row
        #print "end,kraj"
        #TODO file_start, file_end check

        def strToDate(date_str):
            return time.strftime("%Y/%m/%d", time.strptime(date_str, "%d%m%Y"))
        
        bank_st_list = []
        for izvod in izvodi:
            statement_date = strToDate( izvod['izvod_start']['Prosireni datum'] )

            period_id = account_period_obj.search(cr, uid, [('date_start', '<=', statement_date ), ('date_stop', '>=', statement_date)])[0]

            balance_start    = str2float( izvod['izvod_end']['Prethodni saldo'] ) /100
            if izvod['izvod_end']['Predznak pocetnog stanja']=='-':
                balance_start *= -1

            balance_end_real = str2float( izvod['izvod_end']['Novi saldo']      ) /100
            if izvod['izvod_end']['Predznak novog stanja']=='-':
                balance_end_real *= -1
            
            name =  izvod['izvod_start']['Redni broj izvatka'] \
                  + ' - '+ izvod['izvod_start']['Broj dnevnog presjeka']  

            bank_st_id = bank_statement_obj.search(cr, uid, [('name', '=', name )])
            if bank_st_id:
                raise osv.except_osv(_('Izvod već postoji'),_('Izvod broj %s već postoji! Učitavanje prekinuto.') % (name,))

            bank_st_id =bank_statement_obj.create(cr, uid, {
                'journal_id': data['journal_id'],
                'date'      : statement_date,
                'period_id' : period_id,
                'balance_start'   : balance_start,
                'balance_end_real': balance_end_real,
                'state': 'draft',
                'name' : name,
                 })
            bank_st_list.append(bank_st_id)

            for line in izvod['stavke_izvoda']:

                if line['Oznaka transakcije'] in ['10',]:
                    uplata = False 
                    note = 'NA TERET'
                    line_type = 'supplier'
                elif line['Oznaka transakcije'] in ['20',]:
                    uplata = True
                    note = 'U KORIST'
                    line_type = 'customer'
                elif line['Oznaka transakcije'] in ['30',]: # nije izvršeno zbog nedostatka sredstava na računu platitelja
                    line_type = 'general'
                    continue # what else?
                elif line['Oznaka transakcije'] in ['40',]: # nije izvršeno zbog nedostatka novca na zahtjev sudionika
                    line_type = 'general'
                    continue # what else?
                else:
                    raise osv.except_osv(_('Nepoznata oznaka transakcije'),_('Nepoznata oznaka transakcije %s') % (line['Oznaka transakcije'],))

                line_date  = strToDate( line['Datum valute'] )
                line_amount= str2float( line['Iznos'] ) /100
                if line['Oznaka transakcije'] in ['10',]:
                    line_amount *= -1
                
                
                line_vezna= line['Vezna oznaka']
                line_model= line['Poziv na broj odobrenja'][:1]
                line_ref  = line['Poziv na broj odobrenja'][2:].strip()
                line_name = line['Naziv vjer./duz.'].strip() + ' :' + line['Opis svrhe doznake'].strip()
                
                line_bank         = line['Vodeci broj banke vjer./duz.'].strip()
                line_bank_account = line['Racun vjer./duz.'].strip()
                
                note +=  u'\nRačun vjer./duž.:'         + line_bank +'-'+ line_bank_account.strip() \
                        +u'\nPoziv na broj odobrenja: ' + line_ref \
                        +u'\nPartner: '                 + line['Naziv vjer./duz.'] \
                        +u'\nPoziv na broj zaduženja: ' + line['Poziv na broj zaduzenja'] \
                        +u'\nVrsta prihvata: '          + line['Vrsta prihvata'] \
                        +u'\nBroj za reklamaciju: '     + line['Broj za reklamaciju'] 
                 
                # call class method
                # partner_id search by bank account number
                partner_id = None
                # tražimo točnu stavku po opisu i iznosu
                move_line_id = None
                if line['Oznaka transakcije'] in ['10',]: # na teret
                    move_line_id = move_line_obj.search(cr, uid, [('ref'            , '=', line_ref), # isti opis
                                                                  ('reconcile_id'   , '=', False),    # otvorena
                                                                  ('account_id.reconcile', '=', True), # konto se zatvara
                                                                  ('credit'              , '=', line_amount),
                                                                ])
                if line['Oznaka transakcije'] in ['20',]: # u korist
                    move_line_id = move_line_obj.search(cr, uid,[('ref'            , '=', line_ref), 
                                                                 ('reconcile_id'   , '=', False), 
                                                                 ('account_id.reconcile', '=', True),
                                                                 ('debit'               , '=', line_amount),
                                                                ])
                if not move_line_id: #  po opisu i iznosu
                    move_line_id =[]
                    cr.execute("    SELECT m.id FROM account_move_line m " \
                               "  WHERE m.ref = %s      " \
                               "    AND m.reconcile_id IS NULL  " \
                               "    AND m.account_id in (select a.id from account_account a where a.reconcile ='t') " \
                               "   AND abs(m.credit + m.debit) = %s   " ,
                               (line_ref, line_amount)
                               ) 
                    for ml_id in cr.fetchall():
                        move_line_id.append[ml_id]


                if not move_line_id: # samo po opisu 
                    move_line_id = move_line_obj.search(cr, uid, [('ref'            , '=', line_ref), 
                                                                  ('reconcile_id'   , '=', False), 
                                                                  ('account_id.reconcile', '=', True),
                                                                 ])
                
                if move_line_id and (len(move_line_id) == 1): # only one found 
                    partner_id = move_line_obj.browse(cr, uid, move_line_id[0], context=context).partner_id.id   

                #bank account search
                bank_ids = partner_bank_obj.search(cr, uid, [('acc_number', '=', line_bank +'-'+ line_bank_account )])

                bank = None
                if bank_ids and (len(bank_ids)==1):
                   bank = partner_bank_obj.browse(cr, uid, bank_ids, context=context)
                   if (not partner_id) and bank[0] and bank[0].partner_id:
                       partner_id = bank[0].partner_id.id

                #account_id = None
                if partner_id:
                    partner = partner_obj.browse(cr, uid, partner_id, context=context)
                    if uplata:
                        account_id = partner.property_account_receivable.id
                    else:
                        account_id = partner.property_account_payable.id
                else:
                    account_id = data['awaiting_account']        
               
                #if reference&ammount are the same - make voucher payment 
                voucher_id =None
                if move_line_id and (len(move_line_id) == 1) and partner_id:
                    voucher_partner = voucher_obj.onchange_partner_id(cr, uid, [],
                                                             partner_id  = partner_id,
                                                             journal_id  = journal.id,
                                                             price       = abs(line_amount),
                                                             currency_id = journal.company_id.currency_id.id,
                                                             ttype       = line_type == 'supplier' and 'payment' or 'receipt',
                                                             date        = line_date,
                                                             context=context
                                                            )

                    voucher_res = { 
                                'type'       : (line_type == 'supplier' and 'payment' or 'receipt'),
                                'name'       : line_name,
                                'partner_id' : partner_id,
                                'journal_id' : data['journal_id'], 
                                'account_id' : voucher_partner.get('account_id', journal.default_credit_account_id.id),
                                'company_id' : journal.company_id.id,
                                'currency_id': journal.company_id.currency_id.id,
                                'date'       : line_date,
                                'amount'     : abs(line_amount),
                                'period_id'  : period_id,
                                }
                    voucher_id = voucher_obj.create(cr, uid, voucher_res, context=context)
                    context.update({'move_line_ids': move_line_id})

                    voucher_line_dict =  False
                    if voucher_partner['value']['line_ids']:
                        for line_dict in voucher_partner['value']['line_ids']:
                            move_line = move_line_obj.browse(cr, uid, line_dict['move_line_id'], context)
                            if move_line_id[0] == move_line.id: #move_line.move_id.id:
                                voucher_line_dict = line_dict
                                account_id = move_line.account_id.id  # better to take account from move line

                            if voucher_line_dict:
                                voucher_line_dict.update({'voucher_id':voucher_id})
                                voucher_line_obj.create(cr, uid, voucher_line_dict, context=context)

#                            reconcile_id = statement_reconcile_obj.create(cr, uid, {
#                                'line_ids': [(6, 0, rec_id)]
#                                }, context=context)
#
#                            mv = self.pool.get('account.move.line').browse(cr, uid, rec_id[0], context=context)
#                            if mv.partner_id:
#                                partner_id = mv.partner_id.id
#                                if line_amount < 0:
#                                    account_id = mv.partner_id.property_account_payable.id
#                                else:
#                                    account_id = mv.partner_id.property_account_receivable.id
                    

                
                bank_statement_line_obj.create(cr, uid, {
                               'name'        : line_name,
                               'date'        : line_date,
                               'amount'      : line_amount,
                               'type'        : line_type,
                               'partner_id'  : partner_id,
                               'account_id'  : account_id,
                               'statement_id': bank_st_id,
                               'voucher_id'  : voucher_id,
                               'note'        : note,
                               'ref'         : line_ref,
                               'imported_bank_acc_no' : line_bank.strip() +'-'+ line_bank_account.strip() 
                               })

                    
        account_izvod_obj.create(cr, uid, {
            'name': codafile,
            'statement_ids': [(6, 0, bank_st_list,)],
            'note': 'bilješke', #str_log1+str_not+std_log+err_log,
            'journal_id': data['journal_id'],
            'date': time.strftime("%Y-%m-%d"),
            'user_id': uid,
        })
        test = ''
        test = str_log1 + std_log + err_log
        self.write(cr, uid, ids, {'note': test}, context=context)
        context.update({ 'statment_ids': bank_st_list})
        model_data_ids = mod_obj.search(cr, uid, [('model', '=', 'ir.ui.view'), ('name', '=', 'view_account_izvod_form')], context=context)
        resource_id = mod_obj.read(cr, uid, model_data_ids, fields=['res_id'], context=context)[0]['res_id']
        return {
            'name': _('Result'),
            'res_id': ids[0],
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'account.mnizvod.import',
            'view_id': False,
            'target': 'new',
            'views': [(resource_id, 'form')],
            'context': context,
            'type': 'ir.actions.act_window',
        }
                

    def action_open_window(self, cr, uid, data, context=None):
        if context is None:
            context = {}

        return {
            'domain':"[('id','in',%s)]"%(context.get('statment_ids', False)),
            'name': 'Statement',
            'view_type': 'form',
            'view_mode': 'tree,form',
            'res_model': 'account.izvod',
            'view_id': False,
            'type': 'ir.actions.act_window',
    }

account_mnizvod_import()

"""        

        '''        
            bk_st_id =bank_statement_obj.create(cr, uid, {
                'journal_id': statement.get('journal_id',False),
                'date': time.strftime('%Y-%m-%d', time.strptime(statement.get('date',time.strftime('%Y-%m-%d')), "%y/%m/%d")),
                'period_id': statement.get('period_id',False) or period,
                'balance_start': statement.get('balance_start',False),
                'balance_end_real': statement.get('balance_end_real',False),
                'state': 'draft',
                'name': statement.get('name',False),
            })
            lines = statement.get('bank_statement_line',False)
            if lines:
        '''
            
        
        for line in recordlist:
            if tip_sloga == '0':
                # header data
                bank_statement = parse_row ( tip_sloga, line )

                bank_statement["bank_statement_line"]={}
                bank_statement_lines = {}
                bank_statement['date'] = str2date(line[5:11])
                bank_statement['journal_id']=data['journal_id']
                period_id = account_period_obj.search(cr, uid, [('date_start', '<=', time.strftime('%Y-%m-%d', time.strptime(bank_statement['date'], "%y/%m/%d"))), ('date_stop', '>=', time.strftime('%Y-%m-%d', time.strptime(bank_statement['date'], "%y/%m/%d")))])
                bank_statement['period_id'] = period_id and period_id[0] or False
                bank_statement['state']='draft'
            elif line[250] == '1':
                pass
            elif line[250] == '2':
                pass
            elif line[250] == '3':
            
                # old balance data
                bal_start = list2float(line[43:58])
                if line[42] == '1':
                    bal_start = - bal_start
                bank_statement["balance_start"]= bal_start
                bank_statement["acc_number"]=line[5:17]
                bank_statement["acc_holder"]=line[64:90]
                bank_statement['name'] = journal_code + ' ' + str(line[2:5])

            elif line[250] == '4':
                pass

            elif line[250]=='5':
                # movement data record 5
                #if line[0:2]=='10': #odljev - plaćanje dobavljaču
                if line[0]=='1': #odljev - plaćanje dobavljaču
                    # movement data record 2.1
                    if bank_statement_lines.has_key(line[2:6]):
                        continue
                    st_line = {}
                    st_line['extra_note'] = ''
                    st_line['statement_id']=0
                    st_line['ref'] = line[2:10]
                    st_line['date'] = time.strftime('%Y-%m-%d', time.strptime(str2date(line[115:121]), "%y/%m/%d")),
                    st_line_amt = list2float(line[32:47])

                    if line[61]=='1':
                        st_line['toreconcile'] = True
                        st_line['name']=line[65:77]
                    else:
                        st_line['toreconcile'] = False
                        st_line['name']=line[62:115]

                    st_line['free_comm'] = st_line['name']
                    st_line['val_date']=time.strftime('%Y-%m-%d', time.strptime(str2date(line[47:53]), "%y/%m/%d")),
                    st_line['entry_date']=time.strftime('%Y-%m-%d', time.strptime(str2date(line[115:121]), "%y/%m/%d")),
                    st_line['partner_id']=0
                    if line[31] == '1':
                        st_line_amt = - st_line_amt
                        st_line['account_id'] = def_pay_acc
                    else:
                        st_line['account_id'] = def_rec_acc
                    st_line['amount'] = st_line_amt
                    bank_statement_lines[line[2:6]]=st_line
                    bank_statement["bank_statement_line"]=bank_statement_lines
                elif line[1] == '2':
                    st_line_name = line[2:6]
                    bank_statement_lines[st_line_name].update({'account_id': data['awaiting_account']})

                elif line[1] == '3':
                    # movement data record 3.1
                    st_line_name = line[2:6]
                    st_line_partner_acc = str(line[10:47]).strip()
                    cntry_number=line[10:47].strip()
                    contry_name=line[47:125].strip()
                    bank_ids = partner_bank_obj.search(cr, uid, [('acc_number', '=', st_line_partner_acc)])
                    bank_statement_lines[st_line_name].update({'cntry_number': cntry_number, 'contry_name': contry_name})
                    if bank_ids:
                        bank = partner_bank_obj.browse(cr, uid, bank_ids[0], context=context)
                        if line and bank.partner_id:
                            bank_statement_lines[st_line_name].update({'partner_id': bank.partner_id.id})
                            if bank_statement_lines[st_line_name]['amount'] < 0:
                                bank_statement_lines[st_line_name].update({'account_id': bank.partner_id.property_account_payable.id})
                            else:
                                bank_statement_lines[st_line_name].update({'account_id': bank.partner_id.property_account_receivable.id})
                    else:
                        nb_err += 1
                        err_log += _('The bank account %s is not defined for the partner %s.\n')%(cntry_number, contry_name)
                        bank_statement_lines[st_line_name].update({'account_id': data['awaiting_account']})

                    bank_statement["bank_statement_line"]=bank_statement_lines
            elif line[250]=='6':
                pass

            elif line[250]=='7':
                if line[1] == '1':
                    st_line_name = line[2:6]
                    bank_statement_lines[st_line_name]['extra_note'] += '\n' + line[40:113]
                elif line[1] == '2':
                    st_line_name = line[2:6]
                    bank_statement_lines[st_line_name]['extra_note'] += '\n' + line[10:115]
                elif line[1] == '3':
                    st_line_name = line[2:6]
                    bank_statement_lines[st_line_name]['extra_note'] += '\n' + line[10:100]
            elif line[250]=='8':
                pass

            elif line[250]=='9':
                # footer record
                # new balance record
                bal_end = list2float(line[42:57])
                if line[41] == '1':
                    bal_end = - bal_end
                bank_statement["balance_end_real"]= bal_end

                bank_statements.append(bank_statement)
        #end for
     
        bkst_list=[]
        for statement in bank_statements:
            try:
                bk_st_id =bank_statement_obj.create(cr, uid, {
                    'journal_id': statement.get('journal_id',False),
                    'date': time.strftime('%Y-%m-%d', time.strptime(statement.get('date',time.strftime('%Y-%m-%d')), "%y/%m/%d")),
                    'period_id': statement.get('period_id',False) or period,
                    'balance_start': statement.get('balance_start',False),
                    'balance_end_real': statement.get('balance_end_real',False),
                    'state': 'draft',
                    'name': statement.get('name',False),
                })
                lines = statement.get('bank_statement_line',False)
                if lines:
                    for value in lines:
                        journal = journal_obj.browse(cr, uid, statement['journal_id'], context=context)
                        line = lines[value]
                        if not line['partner_id']:
                            line['partner_id'] = journal.company_id.partner_id.id
                        voucher_id = False
                        rec_id = False
                        if line.get('toreconcile',False): # Fix me
                            name = line['name'][:3] + '/' + line['name'][3:7] + '/' + line['name'][7:]
                            rec_id = self.pool.get('account.move.line').search(cr, uid, [('name', '=', name), ('reconcile_id', '=', False),
                             ('account_id.reconcile', '=', True)])
                            if rec_id:
                                result = voucher_obj.onchange_partner_id(cr, uid, [], partner_id=line['partner_id'], journal_id=statement['journal_id'],
                                                     price=abs(line['amount']), currency_id = journal.company_id.currency_id.id,
                                                     ttype=(line['amount'] < 0 and 'payment' or 'receipt'), context=context)
                                voucher_res = { 'type':(line['amount'] < 0 and 'payment' or 'receipt'),
                                        'name': line['name'],#line.name,
                                        'partner_id': line['partner_id'],#line.partner_id.id,
                                        'journal_id': statement['journal_id'], #statement.journal_id.id,
                                        'account_id': result.get('account_id', journal.default_credit_account_id.id),#line.account_id.id,
                                        'company_id': journal.company_id.id,#statement.company_id.id,
                                        'currency_id': journal.company_id.currency_id.id,#statement.currency.id,
                                        'date': line['date'], #line.date,
                                        'amount':abs(line['amount']),
                                        'period_id':statement.get('period_id',False) or period,# statement.period_id.id
                                        }
                                voucher_id = voucher_obj.create(cr, uid, voucher_res, context=context)
                                context.update({'move_line_ids': rec_id})

                                voucher_line_dict =  False
                                if result['value']['line_ids']:
                                    for line_dict in result['value']['line_ids']:
                                        move_line = line_obj.browse(cr, uid, line_dict['move_line_id'], context)
                                        if line.move_id.id == move_line.move_id.id:
                                            voucher_line_dict = line_dict

                                if voucher_line_dict:
                                    voucher_line_dict.update({'voucher_id':voucher_id})
                                    voucher_line_obj.create(cr, uid, voucher_line_dict, context=context)

        #                            reconcile_id = statement_reconcile_obj.create(cr, uid, {
        #                                'line_ids': [(6, 0, rec_id)]
        #                                }, context=context)
        #

                                mv = self.pool.get('account.move.line').browse(cr, uid, rec_id[0], context=context)
                                if mv.partner_id:
                                    line['partner_id'] = mv.partner_id.id
                                    if line['amount'] < 0:
                                        line['account_id'] = mv.partner_id.property_account_payable.id
                                    else:
                                        line['account_id'] = mv.partner_id.property_account_receivable.id
                        str_not1 = ''
                        if line.has_key('contry_name') and line.has_key('cntry_number'):
                            str_not1="Partner name:%s \n Partner Account Number:%s \n Communication:%s \n Value Date:%s \n Entry Date:%s \n"%(line["contry_name"], line["cntry_number"], line["free_comm"]+line['extra_note'], line["val_date"][0], line["entry_date"][0])
                        bank_statement_line_obj.create(cr, uid, {
                                   'name':line['name'],
                                   'date': line['date'],
                                   'amount': line['amount'],
                                   'partner_id':line['partner_id'],
                                   'account_id':line['account_id'],
                                   'statement_id': bk_st_id,
                                   'voucher_id': voucher_id,
                                   'note':str_not1,
                                   'ref':line['ref'],
                                   })

                str_not = "\n \n Account Number: %s \n Account Holder Name: %s " %(statement["acc_number"], statement["acc_holder"])
                std_log += "\nStatement: %s, Date: %s, Starting Balance:  %.2f, Ending Balance: %.2f \n"\
                          %(statement['name'], statement['date'], float(statement["balance_start"]), float(statement["balance_end_real"]))
                bkst_list.append(bk_st_id)

            except osv.except_osv, e:
                cr.rollback()
                nb_err += 1
                err_log += '\n Application Error: ' + str(e)
                raise # REMOVEME

            except Exception, e:
                cr.rollback()
                nb_err += 1
                err_log += '\n System Error: '+str(e)
                raise # REMOVEME
            except:
                cr.rollback()
                nb_err+=1
                err_log += '\n Unknown Error'
                raise
        err_log += '\n\nNumber of statements: '+ str(len(bkst_list))
        err_log += '\nNumber of error:'+ str(nb_err) +'\n'

        account_coda_obj.create(cr, uid, {
            'name': codafile,
            'statement_ids': [(6, 0, bkst_list,)],
            'note': str_log1+str_not+std_log+err_log,
            'journal_id': data['journal_id'],
            'date': time.strftime("%Y-%m-%d"),
            'user_id': uid,
        })
        test = ''
        test = str_log1 + std_log + err_log
        self.write(cr, uid, ids, {'note': test}, context=context)
        context.update({ 'statment_ids': bkst_list})
        model_data_ids = mod_obj.search(cr, uid, [('model', '=', 'ir.ui.view'), ('name', '=', 'account_coda_note_view')], context=context)
        resource_id = mod_obj.read(cr, uid, model_data_ids, fields=['res_id'], context=context)[0]['res_id']
        return {
            'name': _('Result'),
            'res_id': ids[0],
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'account.coda.import',
            'view_id': False,
            'target': 'new',
            'views': [(resource_id, 'form')],
            'context': context,
            'type': 'ir.actions.act_window',
        }
"""   



# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4: